<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MultipleConstructorDescription" xml:space="preserve">
    <value>Startup must not more than one public constructor.</value>
  </data>
  <data name="MultipleConstructorMessageFormat" xml:space="preserve">
    <value>Startup has multiple public constructors.</value>
  </data>
  <data name="MultipleConstructorTitle" xml:space="preserve">
    <value>Startup must not more than one public constructor.</value>
  </data>
  <data name="ParameterlessConstructorDescription" xml:space="preserve">
    <value>Constructor must have no parameter.</value>
  </data>
  <data name="ParameterlessConstructorMessageFormat" xml:space="preserve">
    <value>Constructor must have no parameter.</value>
  </data>
  <data name="ParameterlessConstructorTitle" xml:space="preserve">
    <value>Constructor must have no parameter.</value>
  </data>
  <data name="MultipleOverloadsDescription" xml:space="preserve">
    <value>Having multiple overloads is not supported.</value>
  </data>
  <data name="MultipleOverloadsMessageFormat" xml:space="preserve">
    <value>Having multiple overloads of method '{methodName}' is not supported.</value>
  </data>
  <data name="MultipleOverloadsTitle" xml:space="preserve">
    <value>Method not supported multiple overloads.</value>
  </data>
  <data name="NoReturnTypeDescription" xml:space="preserve">
    <value>Method must have no return type.</value>
  </data>
  <data name="NoReturnTypeMessageFormat" xml:space="preserve">
    <value>The '{0}' method must have no return type.</value>
  </data>
  <data name="NoReturnTypeTitle" xml:space="preserve">
    <value>Method must return type is not void.</value>
  </data>
  <data name="ReturnTypeAssignableToDescription" xml:space="preserve">
    <value>Method must return type must be a sub type of a specific type.</value>
  </data>
  <data name="ReturnTypeAssignableToMessageFormat" xml:space="preserve">
    <value>The '{0}' method return type must assignable to '{1}'.</value>
  </data>
  <data name="ReturnTypeAssignableToTitle" xml:space="preserve">
    <value>Method must return type is invalid.</value>
  </data>
  <data name="ParameterlessOrSingleParameterDescription" xml:space="preserve">
    <value>Method must parameterless or have a single parameter.</value>
  </data>
  <data name="ParameterlessOrSingleParameterMessageFormat" xml:space="preserve">
    <value>The '{0}' method must parameterless or have the single '{1}' parameter.</value>
  </data>
  <data name="ParameterlessOrSingleParameterTitle" xml:space="preserve">
    <value>Method parameters is to much.</value>
  </data>
  <data name="SingleParameterDescription" xml:space="preserve">
    <value>Method must have a single parameter.</value>
  </data>
  <data name="SingleParameterMessageFormat" xml:space="preserve">
    <value>The '{0}' method must have a single {1} parameter.</value>
  </data>
  <data name="SingleParameterTitle" xml:space="preserve">
    <value>Method must have a single parameter.</value>
  </data>
  <data name="ConfigureServicesDescription" xml:space="preserve">
    <value>Method must have a single or tow parameter(s).</value>
  </data>
  <data name="ConfigureServicesMessageFormat" xml:space="preserve">
    <value>The '{0}' method must have a 'IServiceCollection' parameter and optional 'HostBuilderContext' parameter.</value>
  </data>
  <data name="ConfigureServicesTitle" xml:space="preserve">
    <value>Method parameters is to much, parameterless or parameters type not support.</value>
  </data>
</root>
